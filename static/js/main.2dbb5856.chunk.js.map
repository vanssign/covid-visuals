{"version":3,"sources":["components/HeaderComponent.js","components/HomeComponent.js","components/FooterComponent.js","components/StatewiseComponent.js","components/MainComponent.js","redux/ActionCreaters.js","redux/ActionTypes.js","redux/cases.js","App.js","redux/ConfigStore.js","serviceWorker.js","index.js"],"names":["Header","props","useState","isOpen","setIsOpen","Navbar","light","className","expand","NavbarBrand","to","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","NavbarText","Home","labels","datasets","label","data","chartData","updateChart","chartDataDeceased","updateChartDeceased","chartDataRecovered","updateChartRecovered","chartDataActive","updateChartActive","isLoading","src","errMess","cases","labelArray","str","i","length","day","res","split","totalcases","deceasedcases","recoveredcases","activecases","summary","total","deaths","discharged","Button","console","log","pointRadius","borderWidth","borderColor","backgroundColor","Footer","href","Statewise","modal","setModal","toggle","x","j","regional","loc","totalConfirmed","outline","color","Modal","ModalHeader","ModalBody","type","id","name","value","for","ModalFooter","Main","this","fetchCases","exact","path","component","Component","withRouter","connect","state","dispatch","axios","get","baseUrl","then","payload","catch","error","errmess","message","casesFailed","Cases","action","store","createStore","combineReducers","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2dbb5856.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\nimport {NavLink} from 'react-router-dom'\n\nconst Header = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar light className=\"bg-light\" expand=\"md\">\n        <NavbarBrand to=\"/\">covid-Visualiser</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink className=\"nav-link\" to=\"/home\">India</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink className=\"nav-link\" to=\"/state-wise\">State-Wise</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink className=\"nav-link\" to=\"/state-wise\">About</NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Documentation\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>\n                  one\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  two\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  three\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n          <NavbarText>for educational purposes only</NavbarText>\n        </Collapse>\n        \n      </Navbar>\n    </div>\n  );\n}\n\nexport default Header;\n","import React,{useState} from 'react'\nimport{Line,Bar,Pie} from 'react-chartjs-2'\nimport { Button } from 'reactstrap'\n\n\nexport default function Home(props) {\n    const [chartData,updateChart]= useState({labels:[\"1\",\"2\",\"3\",\"4\",\"5\"],\n    datasets:[\n      {\n          label:\"total-cases\",\n          data:[1,1,1,1,1]\n      }\n  ]})\n  const [chartDataDeceased,updateChartDeceased]=useState({labels:[\"1\",\"2\",\"3\",\"4\",\"5\"],\n  datasets:[\n    {\n        label:\"deceased\",\n        data:[1,1,1,1,1]\n    }\n]})\nconst [chartDataRecovered,updateChartRecovered]=useState({labels:[\"1\",\"2\",\"3\",\"4\",\"5\"],\ndatasets:[\n  {\n      label:\"Recovered\",\n      data:[1,1,1,1,1]\n  }\n]})\nconst [chartDataActive,updateChartActive]=useState({labels:[\"1\",\"2\",\"3\",\"4\",\"5\"],\ndatasets:[\n  {\n      label:\"active-cases\",\n      data:[1,1,1,1,1]\n  }\n]})\n    if(props.isLoading){\n        return(\n            <div className=\"container-fluid text-center\">\n                \n                    <img src=\"https://64.media.tumblr.com/30989303b244278454e07c53dd3a47ac/tumblr_nxa257Q6Zh1uzo3myo1_500.gif\" className=\"img-fluid\"/>\n    \n    \n            </div>\n        )\n    }\n    else if (props.errMess){\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h4>{props.errMess}</h4>\n    \n                </div>\n    \n            </div>\n    \n        )\n    }\n    else if(props.cases!=null){\n      var labelArray=[];\n      var str=[]\n      for(let i=0;i<props.cases.data.length;i++){\n       str[i] =`${props.cases.data[i].day}`;\n       var res=str[i].split(\"-\");\n       labelArray[i]=res[2]+'/'+res[1];\n\n      }\n      var totalcases=[];\n      var deceasedcases=[];\n      var recoveredcases=[];\n      var activecases=[];\n      for(let i=0;i<props.cases.data.length;i++){\n          totalcases[i]= props.cases.data[i].summary.total;\n          deceasedcases[i]= props.cases.data[i].summary.deaths;\n          recoveredcases[i]= props.cases.data[i].summary.discharged;\n          activecases[i]= totalcases[i]-recoveredcases[i]-deceasedcases[i];\n      }\n      \n\n      function formGraph(){\nconsole.log(labelArray)\n          updateChart({\n          labels:labelArray,\n          datasets:[{\n              label:\"Total cases\",\n              data:totalcases,\n              pointRadius: 0,\n              borderWidth: 2,\n              borderColor:'blue',\n              backgroundColor:'rgba(0,0,255,0.1)'\n\n          }]\n        })\n        updateChartDeceased({\n            labels:labelArray,\n            datasets:[{\n                label:\"Deceased\",\n                data:deceasedcases,\n                pointRadius: 0,\n                borderWidth: 2,\n                borderColor:'black'\n            }]\n          })\n          updateChartRecovered({\n            labels:labelArray,\n            datasets:[{\n                label:\"Recovered\",\n                data:recoveredcases,\n                pointRadius: 0,\n                borderWidth: 2,\n                borderColor:'green',\n                backgroundColor:'rgba(0,255,0,0.1)'\n  \n            }]\n          })\n          updateChartActive({\n            labels:labelArray,\n            datasets:[{\n                label:\"Active Cases\",\n                data:activecases,\n                pointRadius: 0,\n                borderWidth: 2,\n                borderColor:'red',\n                backgroundColor:'rgba(255,0,0,0.1)'\n  \n            }]\n          })\n        \n        }\n\n    return (\n       \n        <div>\n             \n             <p className=\"lead\">Best viewed on larger screen sizes for now</p>\n             <Button onClick={()=>{formGraph()}}>Compute Graphs</Button>\n             <br/>\n             <br/>\n            <Line data={chartData}/>\n            <br/>\n            <Line data={chartDataActive}/>\n            <br/>\n            <Line data={chartDataRecovered}/>\n            <br/>\n            <Line data={chartDataDeceased}/>\n            \n            \n        </div>\n    )\n}\n}","import React from 'react'\n\nexport default function Footer() {\n    return (\n        <div className=\"bg-light\">\n            Data Source:<a href=\"https://api.rootnet.in/\">api.rootnet.in</a> | <a href=\"https://github.com/vanssign\"><span className=\"fa fa-github fa-lg\"></span> vanssign</a>ed\n            \n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport {Line, Bar, Pie} from 'react-chartjs-2';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter\n} from 'reactstrap';\n\nexport default function Statewise(props) {\n    const {className} = props;\n    const [modal, setModal] = useState(false);\n    const [chartData,updateChart]= useState({labels:[\"1\",\"2\",\"3\",\"4\",\"5\"],\n    datasets:[\n      {\n          label:\"total-cases\",\n          data:[1,1,1,1,1]\n      }\n  ]})\n  const [chartDataDeceased,updateChartDeceased]=useState({labels:[\"1\",\"2\",\"3\",\"4\",\"5\"],\n  datasets:[\n    {\n        label:\"deceased\",\n        data:[1,1,1,1,1]\n    }\n]})\nconst [chartDataRecovered,updateChartRecovered]=useState({labels:[\"1\",\"2\",\"3\",\"4\",\"5\"],\ndatasets:[\n  {\n      label:\"Recovered\",\n      data:[1,1,1,1,1]\n  }\n]})\nconst [chartDataActive,updateChartActive]=useState({labels:[\"1\",\"2\",\"3\",\"4\",\"5\"],\ndatasets:[\n  {\n      label:\"active-cases\",\n      data:[1,1,1,1,1]\n  }\n]})\n\n    const toggle = () => setModal(!modal);\n    if (props.isLoading) {\n        return (\n            <div className=\"container-fluid text-center\">\n\n                <img src=\"https://64.media.tumblr.com/30989303b244278454e07c53dd3a47ac/tumblr_nxa257Q6Zh1uzo3myo1_500.gif\" className=\"img-fluid\"/>\n\n\n            </div>\n        )\n    } else if (props.errMess) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h4>{\n                        props.errMess\n                    }</h4>\n\n                </div>\n\n            </div>\n\n        )\n    } else if (props.cases != null) {\n        var labelArray=[];\n        var str=[]\n        for(let i=0;i<props.cases.data.length;i++){\n         str[i] =`${props.cases.data[i].day}`;\n         var res=str[i].split(\"-\");\n         labelArray[i]=res[2]+'/'+res[1];\n  \n        }\n\n        var x;\n        var totalcases=[];\n        var deceasedcases=[];\n        var recoveredcases=[];\n        var activecases=[];\n\n        for(let i=0;i<props.cases.data.length;i++){\n\n\n            for(let j=0;j<props.cases.data[i].regional.length;j++){\n                if(props.cases.data[i].regional[j].loc==='Andaman and Nicobar Islands'){\n                  x= j\n                }\n                else x=-1\n                }\n            \n            if(x===-1){\n                totalcases[i]=0;\n                deceasedcases[i]=0;\n                recoveredcases[i]=0;\n                activecases[i]=0\n\n            }\n            else{\n            totalcases[i]= props.cases.data[i].regional[x].totalConfirmed;\n            deceasedcases[i]= props.cases.data[i].regional[x].deaths;\n            recoveredcases[i]= props.cases.data[i].regional[x].discharged;\n            activecases[i]= totalcases[i]-recoveredcases[i]-deceasedcases[i]\n        \n        }\n        }\n\n\n  function formGraph(){\n    console.log(labelArray)\n              updateChart({\n              labels:labelArray,\n              datasets:[{\n                  label:\"Total cases\",\n                  data:totalcases,\n                  pointRadius: 0,\n                  borderWidth: 2,\n                  borderColor:'blue',\n                  backgroundColor:'rgba(0,0,255,0.1)'\n    \n              }]\n            })\n            updateChartDeceased({\n                labels:labelArray,\n                datasets:[{\n                    label:\"Deceased\",\n                    data:deceasedcases,\n                    pointRadius: 0,\n                    borderWidth: 2,\n                    borderColor:'black'\n                }]\n              })\n              updateChartRecovered({\n                labels:labelArray,\n                datasets:[{\n                    label:\"Recovered\",\n                    data:recoveredcases,\n                    pointRadius: 0,\n                    borderWidth: 2,\n                    borderColor:'green',\n                    backgroundColor:'rgba(0,255,0,0.1)'\n      \n                }]\n              })\n              updateChartActive({\n                labels:labelArray,\n                datasets:[{\n                    label:\"Active Cases\",\n                    data:activecases,\n                    pointRadius: 0,\n                    borderWidth: 2,\n                    borderColor:'red',\n                    backgroundColor:'rgba(255,0,0,0.1)'\n      \n                }]\n              })\n            \n            }\n        return (\n            <div>\n                <p className=\"lead\">Under maintanence</p>\n                <Button outline color=\"info\"\n                    onClick={toggle}>Change State</Button>\n                     <Button onClick={()=>{formGraph()}}>Compute Graphs</Button>\n                <Modal isOpen={modal}\n                    toggle={toggle}\n                    className={className}>\n                    <ModalHeader toggle={toggle}>Modal title</ModalHeader>\n                    <ModalBody>\n                        <input type=\"radio\" id=\"andaman\" name=\"indianstate\" value=\"andaman\"/>\n                        <label for=\"andaman\">Andaman and Nicobar</label><br/>\n                    </ModalBody>\n                    <ModalFooter>\n                        <Button color=\"primary\"\n                            onClick={toggle}>Do Something</Button>\n                        {' '} </ModalFooter>\n                </Modal>\n                <Line data={chartData}/>\n                <br/>\n                <Line data={chartDataActive}/>\n                <br/>\n                <Line data={chartDataRecovered}/>\n                <br/>\n                <Line data={chartDataDeceased}/>\n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport Header from './HeaderComponent';\nimport Home from './HomeComponent';\nimport Footer from './FooterComponent';\nimport {Switch,Route,Redirect,withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport { fetchCases } from \"../redux/ActionCreaters\";\nimport Statewise from './StatewiseComponent';\n\nconst mapStateToProps = state =>{\n    return {\n       cases: state.cases\n     } \n   }\nconst mapDispatchToProps=(dispatch)=>({\n    fetchCases:()=>dispatch(fetchCases())\n   });\n\nclass Main extends Component {\n\n    componentDidMount(){\n        this.props.fetchCases();\n    }\n\n    render() {\n        const HomePage=()=>{\n            return(\n                <Home cases={this.props.cases.cases}\n                isLoading={this.props.cases.isLoading}\n                errMess={this.props.cases.errMess}/>\n            )\n        }\n        const StatewisePage=()=>{\n            return(\n                <Statewise cases={this.props.cases.cases}\n                isLoading={this.props.cases.isLoading}\n                errMess={this.props.cases.errMess}/>\n            )\n        }\n\n        return (\n            <div>\n                <Header/>\n                <Switch>\n                    <Route exact path=\"/home\" component={HomePage}/>\n                    <Route exact path=\"/state-wise\" component={StatewisePage}/>\n                    {/* <Route exact path=\"/indian-states\" component={()=><RenderIndianStates/>}/>  */}\n                    <Redirect to=\"/home\"/>\n                </Switch>\n                <Footer/>\n                \n            </div>\n        )\n    }\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\n","import * as ActionTypes from './ActionTypes';\nimport {baseUrl} from '../shared/baseUrl';\nimport axios from 'axios'\n\nexport const casesLoading=()=>({\n    type:ActionTypes.CASES_LOADING\n});\n\nexport const casesFailed=(errmess)=>({\n    type:ActionTypes.CASES_FAILED,\n    payload:errmess\n});\n\nexport const addCases=(cases)=>({\n    type:ActionTypes.ADD_CASES,\n    payload:cases\n\n});\n\n//This is thunk\n\nexport const fetchCases=()=>(dispatch)=>{\n    dispatch(casesLoading(true));\n    return axios.get(baseUrl+'data')\n    .then(res=>dispatch(addCases(res.data)))\n    .catch(function(error){\n        dispatch(casesLoading(false))\n        const errmess='Error: '+ error.message;\n        return dispatch(casesFailed(errmess));\n\n    })\n}","\nexport const CASES_LOADING='CASES_LOADING';\nexport const CASES_FAILED='CASES_FAILED';\nexport const ADD_CASES='ADD_CASES';\n\n","import * as Actiontypes from './ActionTypes';\n\nexport const Cases=(state={\n        isLoading:true,\n        errMess:null,\n        cases:[]\n    }, action)=>{\n    switch(action.type){\n        case Actiontypes.ADD_CASES:\n            return{...state,isLoading:false,errMess:null,cases:action.payload};\n\n        case Actiontypes.CASES_LOADING:\n            return{...state,isLoading:true,errMess:null,cases:[]};\n\n        case Actiontypes.CASES_FAILED:\n            return{...state,isLoading:false,errMess: action.payload,cases:[]};\n            \n        default:\n            return state;\n    \n}}","import React, { Component } from 'react';\nimport Main from './components/MainComponent'\nimport './App.css';\nimport {HashRouter} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {ConfigStore} from './redux/ConfigStore';\n\nconst store=ConfigStore();\n\nclass App extends Component{\n\n  render(){\n    return (\n      <Provider store={store}>\n        <HashRouter>\n      <div className=\"App\"> \n         <Main/>\n      </div>\n      </HashRouter>\n      </Provider>\n    \n    \n  );\n}\n}\nexport default App;","import {createStore, combineReducers, applyMiddleware} from 'redux';\nimport {Cases} from './cases';\nimport thunk from 'redux-thunk';\n\n\nexport const ConfigStore =()=>{\n    const store = createStore(\n        combineReducers({\n            cases: Cases,\n        }),\n        applyMiddleware(thunk)\n        );\n        return store;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}